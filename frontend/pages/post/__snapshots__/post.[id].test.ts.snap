// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Should match snapshot 1`] = `
VueWrapper {
  "__app": {
    "_component": {
      "name": "VTU_ROOT",
      "render": [Function],
      "setup": [Function],
    },
    "_container": <div
      data-v-app=""
    >
      <div
        class="max-w-3xl py-[100px] mx-auto"
      >
        <!--v-if-->
      </div>
    </div>,
    "_context": {
      "app": [Circular],
      "components": {
        "PostBookmark": {
          "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
          "__name": "PostBookmark",
          "props": {
            "post": {
              "required": true,
              "type": [Function],
            },
          },
          "render": [Function],
          "setup": [Function],
        },
        "SinglePostCommentsList": {
          "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
          "__name": "SinglePostCommentsList",
          "props": {
            "comments": {
              "required": true,
              "type": [
                [Function],
                null,
              ],
            },
          },
          "render": [Function],
          "setup": [Function],
        },
        "TagsList": {
          "name": "TagsList",
        },
        "transition": {
          "name": "transition",
        },
        "transition-group": {
          "name": "transition-group",
        },
      },
      "config": {
        "compilerOptions": {},
        "errorHandler": undefined,
        "globalProperties": {
          "$pinia": {
            "_a": [Circular],
            "_e": EffectScope {
              "_active": true,
              "cleanups": [],
              "detached": true,
              "effects": [],
              "parent": undefined,
              "scopes": [
                EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": false,
                  "effects": [],
                  "index": 0,
                  "parent": [Circular],
                },
                EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": false,
                  "effects": [],
                  "index": 1,
                  "parent": [Circular],
                },
              ],
            },
            "_p": [
              [Function],
              [Function],
              [Function],
            ],
            "_s": Map {
              "Store for containing posts and related to posts" => {
                "$dispose": [Function],
                "$id": "Store for containing posts and related to posts",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "posts",
                    "followingPosts",
                    "allCategories",
                    "allTags",
                    "loggedInUserPosts",
                    "baseFetchURL",
                    "baseLoggedInUserPostsURL",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": [Circular],
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user" => {
                "$dispose": [Function],
                "$id": "Store for storing information about the logged in user",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "loggedInUserProfile",
                    "idArrayOfSavedPosts",
                    "idArrayOfLoggedInUserFollowingUsers",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": [Circular],
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
            "_testing": true,
            "app": [Circular],
            "install": [Function],
            "state": RefImpl {
              "__v_isRef": true,
              "__v_isShallow": false,
              "_rawValue": {
                "Store for containing posts and related to posts": {
                  "allCategories": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "allTags": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "baseFetchURL": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": "http://localhost:8888/api/feed/",
                    "_value": "http://localhost:8888/api/feed/",
                    "dep": undefined,
                  },
                  "baseLoggedInUserPostsURL": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": "http://localhost:8888/api/min-side/posts/",
                    "_value": "http://localhost:8888/api/min-side/posts/",
                    "dep": undefined,
                  },
                  "followingPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "loggedInUserPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "posts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                },
                "Store for storing information about the logged in user": {
                  "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": [],
                    "_value": [],
                    "dep": undefined,
                  },
                  "idArrayOfSavedPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": [],
                    "_value": [],
                    "dep": undefined,
                  },
                  "loggedInUserProfile": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                },
              },
              "_value": {
                "Store for containing posts and related to posts": {
                  "allCategories": null,
                  "allTags": null,
                  "baseFetchURL": "http://localhost:8888/api/feed/",
                  "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                  "followingPosts": null,
                  "loggedInUserPosts": null,
                  "posts": null,
                },
                "Store for storing information about the logged in user": {
                  "idArrayOfLoggedInUserFollowingUsers": [],
                  "idArrayOfSavedPosts": [],
                  "loggedInUserProfile": null,
                },
              },
              "dep": undefined,
            },
            "use": [Function],
          },
        },
        "isNativeTag": [Function],
        "optionMergeStrategies": {},
        "performance": false,
        "warnHandler": undefined,
      },
      "directives": {},
      "emitsCache": WeakMap {},
      "mixins": [
        {
          "beforeCreate": [Function],
        },
      ],
      "optionsCache": WeakMap {},
      "propsCache": WeakMap {},
      "provides": {
        Symbol(pinia): {
          "_a": [Circular],
          "_e": EffectScope {
            "_active": true,
            "cleanups": [],
            "detached": true,
            "effects": [],
            "parent": undefined,
            "scopes": [
              EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": false,
                "effects": [],
                "index": 0,
                "parent": [Circular],
              },
              EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": false,
                "effects": [],
                "index": 1,
                "parent": [Circular],
              },
            ],
          },
          "_p": [
            [Function],
            [Function],
            [Function],
          ],
          "_s": Map {
            "Store for containing posts and related to posts" => {
              "$dispose": [Function],
              "$id": "Store for containing posts and related to posts",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "posts",
                  "followingPosts",
                  "allCategories",
                  "allTags",
                  "loggedInUserPosts",
                  "baseFetchURL",
                  "baseLoggedInUserPostsURL",
                ],
              },
              "_hotUpdate": [Function],
              "_p": [Circular],
              "allCategories": null,
              "allTags": null,
              "baseFetchURL": "http://localhost:8888/api/feed/",
              "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
              "followingPosts": null,
              "loggedInUserPosts": null,
              "posts": null,
            },
            "Store for storing information about the logged in user" => {
              "$dispose": [Function],
              "$id": "Store for storing information about the logged in user",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "loggedInUserProfile",
                  "idArrayOfSavedPosts",
                  "idArrayOfLoggedInUserFollowingUsers",
                ],
              },
              "_hotUpdate": [Function],
              "_p": [Circular],
              "idArrayOfLoggedInUserFollowingUsers": [],
              "idArrayOfSavedPosts": [],
              "loggedInUserProfile": null,
            },
          },
          "_testing": true,
          "app": [Circular],
          "install": [Function],
          "state": RefImpl {
            "__v_isRef": true,
            "__v_isShallow": false,
            "_rawValue": {
              "Store for containing posts and related to posts": {
                "allCategories": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "allTags": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "baseFetchURL": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": "http://localhost:8888/api/feed/",
                  "_value": "http://localhost:8888/api/feed/",
                  "dep": undefined,
                },
                "baseLoggedInUserPostsURL": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": "http://localhost:8888/api/min-side/posts/",
                  "_value": "http://localhost:8888/api/min-side/posts/",
                  "dep": undefined,
                },
                "followingPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "loggedInUserPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "posts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
              },
              "Store for storing information about the logged in user": {
                "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": [],
                  "_value": [],
                  "dep": undefined,
                },
                "idArrayOfSavedPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": [],
                  "_value": [],
                  "dep": undefined,
                },
                "loggedInUserProfile": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
              },
            },
            "_value": {
              "Store for containing posts and related to posts": {
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user": {
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
            "dep": undefined,
          },
          "use": [Function],
        },
      },
      "reload": [Function],
    },
    "_instance": {
      "a": null,
      "accessCache": {},
      "appContext": {
        "app": [Circular],
        "components": {
          "PostBookmark": {
            "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
            "__name": "PostBookmark",
            "props": {
              "post": {
                "required": true,
                "type": [Function],
              },
            },
            "render": [Function],
            "setup": [Function],
          },
          "SinglePostCommentsList": {
            "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
            "__name": "SinglePostCommentsList",
            "props": {
              "comments": {
                "required": true,
                "type": [
                  [Function],
                  null,
                ],
              },
            },
            "render": [Function],
            "setup": [Function],
          },
          "TagsList": {
            "name": "TagsList",
          },
          "transition": {
            "name": "transition",
          },
          "transition-group": {
            "name": "transition-group",
          },
        },
        "config": {
          "compilerOptions": {},
          "errorHandler": undefined,
          "globalProperties": {
            "$pinia": {
              "_a": [Circular],
              "_e": EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": true,
                "effects": [],
                "parent": undefined,
                "scopes": [
                  EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": false,
                    "effects": [],
                    "index": 0,
                    "parent": [Circular],
                  },
                  EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": false,
                    "effects": [],
                    "index": 1,
                    "parent": [Circular],
                  },
                ],
              },
              "_p": [
                [Function],
                [Function],
                [Function],
              ],
              "_s": Map {
                "Store for containing posts and related to posts" => {
                  "$dispose": [Function],
                  "$id": "Store for containing posts and related to posts",
                  "$onAction": [Function],
                  "$patch": [MockFunction $patch],
                  "$reset": [MockFunction spy],
                  "$subscribe": [Function],
                  "_customProperties": Set {},
                  "_hmrPayload": {
                    "actions": {},
                    "getters": {},
                    "hotState": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": {},
                      "_value": {},
                      "dep": undefined,
                    },
                    "state": [
                      "posts",
                      "followingPosts",
                      "allCategories",
                      "allTags",
                      "loggedInUserPosts",
                      "baseFetchURL",
                      "baseLoggedInUserPostsURL",
                    ],
                  },
                  "_hotUpdate": [Function],
                  "_p": [Circular],
                  "allCategories": null,
                  "allTags": null,
                  "baseFetchURL": "http://localhost:8888/api/feed/",
                  "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                  "followingPosts": null,
                  "loggedInUserPosts": null,
                  "posts": null,
                },
                "Store for storing information about the logged in user" => {
                  "$dispose": [Function],
                  "$id": "Store for storing information about the logged in user",
                  "$onAction": [Function],
                  "$patch": [MockFunction $patch],
                  "$reset": [MockFunction spy],
                  "$subscribe": [Function],
                  "_customProperties": Set {},
                  "_hmrPayload": {
                    "actions": {},
                    "getters": {},
                    "hotState": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": {},
                      "_value": {},
                      "dep": undefined,
                    },
                    "state": [
                      "loggedInUserProfile",
                      "idArrayOfSavedPosts",
                      "idArrayOfLoggedInUserFollowingUsers",
                    ],
                  },
                  "_hotUpdate": [Function],
                  "_p": [Circular],
                  "idArrayOfLoggedInUserFollowingUsers": [],
                  "idArrayOfSavedPosts": [],
                  "loggedInUserProfile": null,
                },
              },
              "_testing": true,
              "app": [Circular],
              "install": [Function],
              "state": RefImpl {
                "__v_isRef": true,
                "__v_isShallow": false,
                "_rawValue": {
                  "Store for containing posts and related to posts": {
                    "allCategories": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "allTags": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "baseFetchURL": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": "http://localhost:8888/api/feed/",
                      "_value": "http://localhost:8888/api/feed/",
                      "dep": undefined,
                    },
                    "baseLoggedInUserPostsURL": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": "http://localhost:8888/api/min-side/posts/",
                      "_value": "http://localhost:8888/api/min-side/posts/",
                      "dep": undefined,
                    },
                    "followingPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "loggedInUserPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "posts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                  },
                  "Store for storing information about the logged in user": {
                    "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": [],
                      "_value": [],
                      "dep": undefined,
                    },
                    "idArrayOfSavedPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": [],
                      "_value": [],
                      "dep": undefined,
                    },
                    "loggedInUserProfile": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                  },
                },
                "_value": {
                  "Store for containing posts and related to posts": {
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user": {
                    "idArrayOfLoggedInUserFollowingUsers": [],
                    "idArrayOfSavedPosts": [],
                    "loggedInUserProfile": null,
                  },
                },
                "dep": undefined,
              },
              "use": [Function],
            },
          },
          "isNativeTag": [Function],
          "optionMergeStrategies": {},
          "performance": false,
          "warnHandler": undefined,
        },
        "directives": {},
        "emitsCache": WeakMap {},
        "mixins": [
          {
            "beforeCreate": [Function],
          },
        ],
        "optionsCache": WeakMap {},
        "propsCache": WeakMap {},
        "provides": {
          Symbol(pinia): {
            "_a": [Circular],
            "_e": EffectScope {
              "_active": true,
              "cleanups": [],
              "detached": true,
              "effects": [],
              "parent": undefined,
              "scopes": [
                EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": false,
                  "effects": [],
                  "index": 0,
                  "parent": [Circular],
                },
                EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": false,
                  "effects": [],
                  "index": 1,
                  "parent": [Circular],
                },
              ],
            },
            "_p": [
              [Function],
              [Function],
              [Function],
            ],
            "_s": Map {
              "Store for containing posts and related to posts" => {
                "$dispose": [Function],
                "$id": "Store for containing posts and related to posts",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "posts",
                    "followingPosts",
                    "allCategories",
                    "allTags",
                    "loggedInUserPosts",
                    "baseFetchURL",
                    "baseLoggedInUserPostsURL",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": [Circular],
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user" => {
                "$dispose": [Function],
                "$id": "Store for storing information about the logged in user",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "loggedInUserProfile",
                    "idArrayOfSavedPosts",
                    "idArrayOfLoggedInUserFollowingUsers",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": [Circular],
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
            "_testing": true,
            "app": [Circular],
            "install": [Function],
            "state": RefImpl {
              "__v_isRef": true,
              "__v_isShallow": false,
              "_rawValue": {
                "Store for containing posts and related to posts": {
                  "allCategories": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "allTags": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "baseFetchURL": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": "http://localhost:8888/api/feed/",
                    "_value": "http://localhost:8888/api/feed/",
                    "dep": undefined,
                  },
                  "baseLoggedInUserPostsURL": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": "http://localhost:8888/api/min-side/posts/",
                    "_value": "http://localhost:8888/api/min-side/posts/",
                    "dep": undefined,
                  },
                  "followingPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "loggedInUserPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                  "posts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                },
                "Store for storing information about the logged in user": {
                  "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": [],
                    "_value": [],
                    "dep": undefined,
                  },
                  "idArrayOfSavedPosts": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": [],
                    "_value": [],
                    "dep": undefined,
                  },
                  "loggedInUserProfile": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": null,
                    "_value": null,
                    "dep": undefined,
                  },
                },
              },
              "_value": {
                "Store for containing posts and related to posts": {
                  "allCategories": null,
                  "allTags": null,
                  "baseFetchURL": "http://localhost:8888/api/feed/",
                  "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                  "followingPosts": null,
                  "loggedInUserPosts": null,
                  "posts": null,
                },
                "Store for storing information about the logged in user": {
                  "idArrayOfLoggedInUserFollowingUsers": [],
                  "idArrayOfSavedPosts": [],
                  "loggedInUserProfile": null,
                },
              },
              "dep": undefined,
            },
            "use": [Function],
          },
        },
        "reload": [Function],
      },
      "asyncDep": null,
      "asyncResolved": false,
      "attrs": {},
      "attrsProxy": null,
      "bc": null,
      "bm": null,
      "bu": null,
      "bum": null,
      "c": null,
      "components": null,
      "ctx": {
        "VTU_COMPONENT": {},
      },
      "da": null,
      "data": {},
      "devtoolsRawSetupState": {
        "VTU_COMPONENT": RefImpl {
          "__v_isRef": true,
          "__v_isShallow": false,
          "_rawValue": {},
          "_value": {},
          "dep": undefined,
        },
      },
      "directives": null,
      "ec": null,
      "effect": ReactiveEffect {
        "active": true,
        "allowRecurse": true,
        "deps": [
          Set {
            [Circular],
          },
          Set {
            [Circular],
          },
          Set {
            [Circular],
          },
        ],
        "fn": [Function],
        "onTrack": undefined,
        "onTrigger": undefined,
        "parent": undefined,
        "scheduler": [Function],
      },
      "emit": [Function],
      "emitsOptions": null,
      "emitted": null,
      "exposeProxy": null,
      "exposed": null,
      "inheritAttrs": undefined,
      "isDeactivated": false,
      "isMounted": true,
      "isUnmounted": false,
      "m": null,
      "next": null,
      "parent": null,
      "props": {},
      "propsDefaults": {},
      "propsOptions": [
        {},
        [],
      ],
      "provides": {},
      "proxy": {
        "VTU_COMPONENT": {},
      },
      "refs": {
        "VTU_COMPONENT": {},
      },
      "render": [Function],
      "renderCache": [],
      "root": [Circular],
      "rtc": null,
      "rtg": null,
      "scope": EffectScope {
        "_active": true,
        "cleanups": [],
        "detached": true,
        "effects": [
          ReactiveEffect {
            "active": true,
            "allowRecurse": true,
            "deps": [
              Set {
                [Circular],
              },
              Set {
                [Circular],
              },
              Set {
                [Circular],
              },
            ],
            "fn": [Function],
            "onTrack": undefined,
            "onTrigger": undefined,
            "parent": undefined,
            "scheduler": [Function],
          },
        ],
        "parent": undefined,
      },
      "setupContext": null,
      "setupState": {
        "VTU_COMPONENT": {},
      },
      "slots": {},
      "slotsProxy": null,
      "sp": null,
      "subTree": {
        "__v_isVNode": true,
        "__v_skip": true,
        "anchor": null,
        "appContext": null,
        "children": {
          "_ctx": [Circular],
        },
        "component": {
          "a": null,
          "accessCache": {
            "_pStores": 4,
          },
          "appContext": {
            "app": [Circular],
            "components": {
              "PostBookmark": {
                "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
                "__name": "PostBookmark",
                "props": {
                  "post": {
                    "required": true,
                    "type": [Function],
                  },
                },
                "render": [Function],
                "setup": [Function],
              },
              "SinglePostCommentsList": {
                "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
                "__name": "SinglePostCommentsList",
                "props": {
                  "comments": {
                    "required": true,
                    "type": [
                      [Function],
                      null,
                    ],
                  },
                },
                "render": [Function],
                "setup": [Function],
              },
              "TagsList": {
                "name": "TagsList",
              },
              "transition": {
                "name": "transition",
              },
              "transition-group": {
                "name": "transition-group",
              },
            },
            "config": {
              "compilerOptions": {},
              "errorHandler": undefined,
              "globalProperties": {
                "$pinia": {
                  "_a": [Circular],
                  "_e": EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": true,
                    "effects": [],
                    "parent": undefined,
                    "scopes": [
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 0,
                        "parent": [Circular],
                      },
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 1,
                        "parent": [Circular],
                      },
                    ],
                  },
                  "_p": [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "_s": Map {
                    "Store for containing posts and related to posts" => {
                      "$dispose": [Function],
                      "$id": "Store for containing posts and related to posts",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "posts",
                          "followingPosts",
                          "allCategories",
                          "allTags",
                          "loggedInUserPosts",
                          "baseFetchURL",
                          "baseLoggedInUserPostsURL",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user" => {
                      "$dispose": [Function],
                      "$id": "Store for storing information about the logged in user",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "loggedInUserProfile",
                          "idArrayOfSavedPosts",
                          "idArrayOfLoggedInUserFollowingUsers",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "_testing": true,
                  "app": [Circular],
                  "install": [Function],
                  "state": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {
                      "Store for containing posts and related to posts": {
                        "allCategories": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "allTags": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "baseFetchURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/feed/",
                          "_value": "http://localhost:8888/api/feed/",
                          "dep": undefined,
                        },
                        "baseLoggedInUserPostsURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/min-side/posts/",
                          "_value": "http://localhost:8888/api/min-side/posts/",
                          "dep": undefined,
                        },
                        "followingPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "loggedInUserPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "posts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "idArrayOfSavedPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "loggedInUserProfile": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                    },
                    "_value": {
                      "Store for containing posts and related to posts": {
                        "allCategories": null,
                        "allTags": null,
                        "baseFetchURL": "http://localhost:8888/api/feed/",
                        "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                        "followingPosts": null,
                        "loggedInUserPosts": null,
                        "posts": null,
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": [],
                        "idArrayOfSavedPosts": [],
                        "loggedInUserProfile": null,
                      },
                    },
                    "dep": undefined,
                  },
                  "use": [Function],
                },
              },
              "isNativeTag": [Function],
              "optionMergeStrategies": {},
              "performance": false,
              "warnHandler": undefined,
            },
            "directives": {},
            "emitsCache": WeakMap {},
            "mixins": [
              {
                "beforeCreate": [Function],
              },
            ],
            "optionsCache": WeakMap {},
            "propsCache": WeakMap {},
            "provides": {
              Symbol(pinia): {
                "_a": [Circular],
                "_e": EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": true,
                  "effects": [],
                  "parent": undefined,
                  "scopes": [
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 0,
                      "parent": [Circular],
                    },
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 1,
                      "parent": [Circular],
                    },
                  ],
                },
                "_p": [
                  [Function],
                  [Function],
                  [Function],
                ],
                "_s": Map {
                  "Store for containing posts and related to posts" => {
                    "$dispose": [Function],
                    "$id": "Store for containing posts and related to posts",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "posts",
                        "followingPosts",
                        "allCategories",
                        "allTags",
                        "loggedInUserPosts",
                        "baseFetchURL",
                        "baseLoggedInUserPostsURL",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user" => {
                    "$dispose": [Function],
                    "$id": "Store for storing information about the logged in user",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "loggedInUserProfile",
                        "idArrayOfSavedPosts",
                        "idArrayOfLoggedInUserFollowingUsers",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "idArrayOfLoggedInUserFollowingUsers": [],
                    "idArrayOfSavedPosts": [],
                    "loggedInUserProfile": null,
                  },
                },
                "_testing": true,
                "app": [Circular],
                "install": [Function],
                "state": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {
                    "Store for containing posts and related to posts": {
                      "allCategories": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "allTags": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "baseFetchURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/feed/",
                        "_value": "http://localhost:8888/api/feed/",
                        "dep": undefined,
                      },
                      "baseLoggedInUserPostsURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/min-side/posts/",
                        "_value": "http://localhost:8888/api/min-side/posts/",
                        "dep": undefined,
                      },
                      "followingPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "loggedInUserPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "posts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "idArrayOfSavedPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "loggedInUserProfile": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                  },
                  "_value": {
                    "Store for containing posts and related to posts": {
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "dep": undefined,
                },
                "use": [Function],
              },
            },
            "reload": [Function],
          },
          "asyncDep": null,
          "asyncResolved": false,
          "attrs": {},
          "attrsProxy": null,
          "bc": null,
          "bm": null,
          "bu": null,
          "bum": null,
          "c": null,
          "components": {
            "PostBookmark": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
              "__name": "PostBookmark",
              "props": {
                "post": {
                  "required": true,
                  "type": [Function],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "SinglePostCommentsList": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
              "__name": "SinglePostCommentsList",
              "props": {
                "comments": {
                  "required": true,
                  "type": [
                    [Function],
                    null,
                  ],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "TagsList": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/TagsList.vue",
              "__name": "TagsList",
              "props": {
                "tags": {
                  "required": true,
                  "type": [Function],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
          },
          "ctx": {
            "_pStores": {
              "Store for containing posts and related to posts": {
                "$dispose": [Function],
                "$id": "Store for containing posts and related to posts",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "posts",
                    "followingPosts",
                    "allCategories",
                    "allTags",
                    "loggedInUserPosts",
                    "baseFetchURL",
                    "baseLoggedInUserPostsURL",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": {
                  "_a": [Circular],
                  "_e": EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": true,
                    "effects": [],
                    "parent": undefined,
                    "scopes": [
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 0,
                        "parent": [Circular],
                      },
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 1,
                        "parent": [Circular],
                      },
                    ],
                  },
                  "_p": [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "_s": Map {
                    "Store for containing posts and related to posts" => [Circular],
                    "Store for storing information about the logged in user" => {
                      "$dispose": [Function],
                      "$id": "Store for storing information about the logged in user",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "loggedInUserProfile",
                          "idArrayOfSavedPosts",
                          "idArrayOfLoggedInUserFollowingUsers",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "_testing": true,
                  "app": [Circular],
                  "install": [Function],
                  "state": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {
                      "Store for containing posts and related to posts": {
                        "allCategories": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "allTags": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "baseFetchURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/feed/",
                          "_value": "http://localhost:8888/api/feed/",
                          "dep": undefined,
                        },
                        "baseLoggedInUserPostsURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/min-side/posts/",
                          "_value": "http://localhost:8888/api/min-side/posts/",
                          "dep": undefined,
                        },
                        "followingPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "loggedInUserPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "posts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "idArrayOfSavedPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "loggedInUserProfile": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                    },
                    "_value": {
                      "Store for containing posts and related to posts": {
                        "allCategories": null,
                        "allTags": null,
                        "baseFetchURL": "http://localhost:8888/api/feed/",
                        "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                        "followingPosts": null,
                        "loggedInUserPosts": null,
                        "posts": null,
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": [],
                        "idArrayOfSavedPosts": [],
                        "loggedInUserProfile": null,
                      },
                    },
                    "dep": undefined,
                  },
                  "use": [Function],
                },
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user": {
                "$dispose": [Function],
                "$id": "Store for storing information about the logged in user",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "loggedInUserProfile",
                    "idArrayOfSavedPosts",
                    "idArrayOfLoggedInUserFollowingUsers",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": {
                  "_a": [Circular],
                  "_e": EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": true,
                    "effects": [],
                    "parent": undefined,
                    "scopes": [
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 0,
                        "parent": [Circular],
                      },
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 1,
                        "parent": [Circular],
                      },
                    ],
                  },
                  "_p": [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "_s": Map {
                    "Store for containing posts and related to posts" => {
                      "$dispose": [Function],
                      "$id": "Store for containing posts and related to posts",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "posts",
                          "followingPosts",
                          "allCategories",
                          "allTags",
                          "loggedInUserPosts",
                          "baseFetchURL",
                          "baseLoggedInUserPostsURL",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user" => [Circular],
                  },
                  "_testing": true,
                  "app": [Circular],
                  "install": [Function],
                  "state": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {
                      "Store for containing posts and related to posts": {
                        "allCategories": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "allTags": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "baseFetchURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/feed/",
                          "_value": "http://localhost:8888/api/feed/",
                          "dep": undefined,
                        },
                        "baseLoggedInUserPostsURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/min-side/posts/",
                          "_value": "http://localhost:8888/api/min-side/posts/",
                          "dep": undefined,
                        },
                        "followingPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "loggedInUserPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "posts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "idArrayOfSavedPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "loggedInUserProfile": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                    },
                    "_value": {
                      "Store for containing posts and related to posts": {
                        "allCategories": null,
                        "allTags": null,
                        "baseFetchURL": "http://localhost:8888/api/feed/",
                        "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                        "followingPosts": null,
                        "loggedInUserPosts": null,
                        "posts": null,
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": [],
                        "idArrayOfSavedPosts": [],
                        "loggedInUserProfile": null,
                      },
                    },
                    "dep": undefined,
                  },
                  "use": [Function],
                },
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
          },
          "da": null,
          "data": {},
          "devtoolsRawSetupState": {
            "all_comments": RefImpl {
              "__v_isRef": true,
              "__v_isShallow": false,
              "_rawValue": null,
              "_value": null,
              "dep": undefined,
            },
            "loggedInUserStore": {
              "$dispose": [Function],
              "$id": "Store for storing information about the logged in user",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "loggedInUserProfile",
                  "idArrayOfSavedPosts",
                  "idArrayOfLoggedInUserFollowingUsers",
                ],
              },
              "_hotUpdate": [Function],
              "_p": {
                "_a": [Circular],
                "_e": EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": true,
                  "effects": [],
                  "parent": undefined,
                  "scopes": [
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 0,
                      "parent": [Circular],
                    },
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 1,
                      "parent": [Circular],
                    },
                  ],
                },
                "_p": [
                  [Function],
                  [Function],
                  [Function],
                ],
                "_s": Map {
                  "Store for containing posts and related to posts" => {
                    "$dispose": [Function],
                    "$id": "Store for containing posts and related to posts",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "posts",
                        "followingPosts",
                        "allCategories",
                        "allTags",
                        "loggedInUserPosts",
                        "baseFetchURL",
                        "baseLoggedInUserPostsURL",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user" => [Circular],
                },
                "_testing": true,
                "app": [Circular],
                "install": [Function],
                "state": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {
                    "Store for containing posts and related to posts": {
                      "allCategories": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "allTags": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "baseFetchURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/feed/",
                        "_value": "http://localhost:8888/api/feed/",
                        "dep": undefined,
                      },
                      "baseLoggedInUserPostsURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/min-side/posts/",
                        "_value": "http://localhost:8888/api/min-side/posts/",
                        "dep": undefined,
                      },
                      "followingPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "loggedInUserPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "posts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "idArrayOfSavedPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "loggedInUserProfile": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                  },
                  "_value": {
                    "Store for containing posts and related to posts": {
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "dep": undefined,
                },
                "use": [Function],
              },
              "idArrayOfLoggedInUserFollowingUsers": [],
              "idArrayOfSavedPosts": [],
              "loggedInUserProfile": null,
            },
            "placeholder_profile_picture": "/assets/placeholder-profile-picture.png",
            "post": RefImpl {
              "__v_isRef": true,
              "__v_isShallow": false,
              "_rawValue": null,
              "_value": null,
              "dep": Set {
                ReactiveEffect {
                  "active": true,
                  "allowRecurse": true,
                  "deps": [
                    [Circular],
                  ],
                  "fn": [Function],
                  "onTrack": undefined,
                  "onTrigger": undefined,
                  "parent": undefined,
                  "scheduler": [Function],
                },
              },
            },
            "route": {
              "params": {
                "id": 1,
              },
            },
          },
          "directives": null,
          "ec": null,
          "effect": ReactiveEffect {
            "active": true,
            "allowRecurse": true,
            "deps": [
              Set {
                [Circular],
              },
            ],
            "fn": [Function],
            "onTrack": undefined,
            "onTrigger": undefined,
            "parent": undefined,
            "scheduler": [Function],
          },
          "emit": [Function],
          "emitsOptions": null,
          "emitted": null,
          "exposeProxy": {},
          "exposed": {},
          "inheritAttrs": undefined,
          "isDeactivated": false,
          "isMounted": true,
          "isUnmounted": false,
          "m": [
            [Function],
            [Function],
          ],
          "next": null,
          "parent": [Circular],
          "props": {},
          "propsDefaults": {},
          "propsOptions": [
            {},
            [],
          ],
          "provides": {},
          "proxy": {
            "_pStores": {
              "Store for containing posts and related to posts": {
                "$dispose": [Function],
                "$id": "Store for containing posts and related to posts",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "posts",
                    "followingPosts",
                    "allCategories",
                    "allTags",
                    "loggedInUserPosts",
                    "baseFetchURL",
                    "baseLoggedInUserPostsURL",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": {
                  "_a": [Circular],
                  "_e": EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": true,
                    "effects": [],
                    "parent": undefined,
                    "scopes": [
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 0,
                        "parent": [Circular],
                      },
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 1,
                        "parent": [Circular],
                      },
                    ],
                  },
                  "_p": [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "_s": Map {
                    "Store for containing posts and related to posts" => [Circular],
                    "Store for storing information about the logged in user" => {
                      "$dispose": [Function],
                      "$id": "Store for storing information about the logged in user",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "loggedInUserProfile",
                          "idArrayOfSavedPosts",
                          "idArrayOfLoggedInUserFollowingUsers",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "_testing": true,
                  "app": [Circular],
                  "install": [Function],
                  "state": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {
                      "Store for containing posts and related to posts": {
                        "allCategories": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "allTags": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "baseFetchURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/feed/",
                          "_value": "http://localhost:8888/api/feed/",
                          "dep": undefined,
                        },
                        "baseLoggedInUserPostsURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/min-side/posts/",
                          "_value": "http://localhost:8888/api/min-side/posts/",
                          "dep": undefined,
                        },
                        "followingPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "loggedInUserPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "posts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "idArrayOfSavedPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "loggedInUserProfile": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                    },
                    "_value": {
                      "Store for containing posts and related to posts": {
                        "allCategories": null,
                        "allTags": null,
                        "baseFetchURL": "http://localhost:8888/api/feed/",
                        "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                        "followingPosts": null,
                        "loggedInUserPosts": null,
                        "posts": null,
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": [],
                        "idArrayOfSavedPosts": [],
                        "loggedInUserProfile": null,
                      },
                    },
                    "dep": undefined,
                  },
                  "use": [Function],
                },
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user": {
                "$dispose": [Function],
                "$id": "Store for storing information about the logged in user",
                "$onAction": [Function],
                "$patch": [MockFunction $patch],
                "$reset": [MockFunction spy],
                "$subscribe": [Function],
                "_customProperties": Set {},
                "_hmrPayload": {
                  "actions": {},
                  "getters": {},
                  "hotState": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {},
                    "_value": {},
                    "dep": undefined,
                  },
                  "state": [
                    "loggedInUserProfile",
                    "idArrayOfSavedPosts",
                    "idArrayOfLoggedInUserFollowingUsers",
                  ],
                },
                "_hotUpdate": [Function],
                "_p": {
                  "_a": [Circular],
                  "_e": EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": true,
                    "effects": [],
                    "parent": undefined,
                    "scopes": [
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 0,
                        "parent": [Circular],
                      },
                      EffectScope {
                        "_active": true,
                        "cleanups": [],
                        "detached": false,
                        "effects": [],
                        "index": 1,
                        "parent": [Circular],
                      },
                    ],
                  },
                  "_p": [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "_s": Map {
                    "Store for containing posts and related to posts" => {
                      "$dispose": [Function],
                      "$id": "Store for containing posts and related to posts",
                      "$onAction": [Function],
                      "$patch": [MockFunction $patch],
                      "$reset": [MockFunction spy],
                      "$subscribe": [Function],
                      "_customProperties": Set {},
                      "_hmrPayload": {
                        "actions": {},
                        "getters": {},
                        "hotState": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": {},
                          "_value": {},
                          "dep": undefined,
                        },
                        "state": [
                          "posts",
                          "followingPosts",
                          "allCategories",
                          "allTags",
                          "loggedInUserPosts",
                          "baseFetchURL",
                          "baseLoggedInUserPostsURL",
                        ],
                      },
                      "_hotUpdate": [Function],
                      "_p": [Circular],
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user" => [Circular],
                  },
                  "_testing": true,
                  "app": [Circular],
                  "install": [Function],
                  "state": RefImpl {
                    "__v_isRef": true,
                    "__v_isShallow": false,
                    "_rawValue": {
                      "Store for containing posts and related to posts": {
                        "allCategories": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "allTags": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "baseFetchURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/feed/",
                          "_value": "http://localhost:8888/api/feed/",
                          "dep": undefined,
                        },
                        "baseLoggedInUserPostsURL": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": "http://localhost:8888/api/min-side/posts/",
                          "_value": "http://localhost:8888/api/min-side/posts/",
                          "dep": undefined,
                        },
                        "followingPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "loggedInUserPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                        "posts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "idArrayOfSavedPosts": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": [],
                          "_value": [],
                          "dep": undefined,
                        },
                        "loggedInUserProfile": RefImpl {
                          "__v_isRef": true,
                          "__v_isShallow": false,
                          "_rawValue": null,
                          "_value": null,
                          "dep": undefined,
                        },
                      },
                    },
                    "_value": {
                      "Store for containing posts and related to posts": {
                        "allCategories": null,
                        "allTags": null,
                        "baseFetchURL": "http://localhost:8888/api/feed/",
                        "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                        "followingPosts": null,
                        "loggedInUserPosts": null,
                        "posts": null,
                      },
                      "Store for storing information about the logged in user": {
                        "idArrayOfLoggedInUserFollowingUsers": [],
                        "idArrayOfSavedPosts": [],
                        "loggedInUserProfile": null,
                      },
                    },
                    "dep": undefined,
                  },
                  "use": [Function],
                },
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
          },
          "refs": {},
          "render": [Function],
          "renderCache": [],
          "root": [Circular],
          "rtc": null,
          "rtg": null,
          "scope": EffectScope {
            "_active": true,
            "cleanups": [],
            "detached": true,
            "effects": [
              ReactiveEffect {
                "active": true,
                "allowRecurse": true,
                "deps": [
                  Set {
                    [Circular],
                  },
                ],
                "fn": [Function],
                "onTrack": undefined,
                "onTrigger": undefined,
                "parent": undefined,
                "scheduler": [Function],
              },
            ],
            "parent": undefined,
          },
          "setupContext": {
            "attrs": {},
            "emit": [Function],
            "expose": [Function],
            "slots": {},
          },
          "setupState": {
            "all_comments": null,
            "loggedInUserStore": {
              "$dispose": [Function],
              "$id": "Store for storing information about the logged in user",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "loggedInUserProfile",
                  "idArrayOfSavedPosts",
                  "idArrayOfLoggedInUserFollowingUsers",
                ],
              },
              "_hotUpdate": [Function],
              "_p": {
                "_a": [Circular],
                "_e": EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": true,
                  "effects": [],
                  "parent": undefined,
                  "scopes": [
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 0,
                      "parent": [Circular],
                    },
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 1,
                      "parent": [Circular],
                    },
                  ],
                },
                "_p": [
                  [Function],
                  [Function],
                  [Function],
                ],
                "_s": Map {
                  "Store for containing posts and related to posts" => {
                    "$dispose": [Function],
                    "$id": "Store for containing posts and related to posts",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "posts",
                        "followingPosts",
                        "allCategories",
                        "allTags",
                        "loggedInUserPosts",
                        "baseFetchURL",
                        "baseLoggedInUserPostsURL",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user" => [Circular],
                },
                "_testing": true,
                "app": [Circular],
                "install": [Function],
                "state": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {
                    "Store for containing posts and related to posts": {
                      "allCategories": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "allTags": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "baseFetchURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/feed/",
                        "_value": "http://localhost:8888/api/feed/",
                        "dep": undefined,
                      },
                      "baseLoggedInUserPostsURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/min-side/posts/",
                        "_value": "http://localhost:8888/api/min-side/posts/",
                        "dep": undefined,
                      },
                      "followingPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "loggedInUserPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "posts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "idArrayOfSavedPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "loggedInUserProfile": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                  },
                  "_value": {
                    "Store for containing posts and related to posts": {
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "dep": undefined,
                },
                "use": [Function],
              },
              "idArrayOfLoggedInUserFollowingUsers": [],
              "idArrayOfSavedPosts": [],
              "loggedInUserProfile": null,
            },
            "placeholder_profile_picture": "/assets/placeholder-profile-picture.png",
            "post": null,
            "route": {
              "params": {
                "id": 1,
              },
            },
          },
          "slots": {},
          "slotsProxy": {},
          "sp": null,
          "subTree": {
            "__v_isVNode": true,
            "__v_skip": true,
            "anchor": null,
            "appContext": null,
            "children": [
              {
                "__v_isVNode": true,
                "__v_skip": true,
                "anchor": null,
                "appContext": null,
                "children": "v-if",
                "component": null,
                "ctx": [Circular],
                "dirs": null,
                "dynamicChildren": [],
                "dynamicProps": null,
                "el": <!--v-if-->,
                "key": null,
                "patchFlag": 0,
                "props": null,
                "ref": null,
                "scopeId": null,
                "shapeFlag": 8,
                "slotScopeIds": null,
                "ssContent": null,
                "ssFallback": null,
                "staticCount": 0,
                "suspense": null,
                "target": null,
                "targetAnchor": null,
                "transition": null,
                "type": Symbol(v-cmt),
              },
            ],
            "component": null,
            "ctx": [Circular],
            "dirs": null,
            "dynamicChildren": [
              {
                "__v_isVNode": true,
                "__v_skip": true,
                "anchor": null,
                "appContext": null,
                "children": "v-if",
                "component": null,
                "ctx": [Circular],
                "dirs": null,
                "dynamicChildren": [],
                "dynamicProps": null,
                "el": <!--v-if-->,
                "key": null,
                "patchFlag": 0,
                "props": null,
                "ref": null,
                "scopeId": null,
                "shapeFlag": 8,
                "slotScopeIds": null,
                "ssContent": null,
                "ssFallback": null,
                "staticCount": 0,
                "suspense": null,
                "target": null,
                "targetAnchor": null,
                "transition": null,
                "type": Symbol(v-cmt),
              },
            ],
            "dynamicProps": null,
            "el": <div
              class="max-w-3xl py-[100px] mx-auto"
            >
              <!--v-if-->
            </div>,
            "key": null,
            "patchFlag": 0,
            "props": {
              "class": "max-w-3xl py-[100px] mx-auto",
            },
            "ref": null,
            "scopeId": null,
            "shapeFlag": 17,
            "slotScopeIds": null,
            "ssContent": null,
            "ssFallback": null,
            "staticCount": 0,
            "suspense": null,
            "target": null,
            "targetAnchor": null,
            "transition": null,
            "type": "div",
          },
          "suspense": null,
          "suspenseId": 0,
          "type": {
            "__file": "C:/Users/metle/Desktop/Blogg/frontend/pages/post/[id].vue",
            "__name": "[id]",
            "components": {
              "PostBookmark": {
                "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
                "__name": "PostBookmark",
                "props": {
                  "post": {
                    "required": true,
                    "type": [Function],
                  },
                },
                "render": [Function],
                "setup": [Function],
              },
              "SinglePostCommentsList": {
                "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
                "__name": "SinglePostCommentsList",
                "props": {
                  "comments": {
                    "required": true,
                    "type": [
                      [Function],
                      null,
                    ],
                  },
                },
                "render": [Function],
                "setup": [Function],
              },
              "TagsList": {
                "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/TagsList.vue",
                "__name": "TagsList",
                "props": {
                  "tags": {
                    "required": true,
                    "type": [Function],
                  },
                },
                "render": [Function],
                "setup": [Function],
              },
            },
            "render": [Function],
            "setup": [Function],
          },
          "u": null,
          "uid": 3,
          "um": null,
          "update": [Function],
          "vnode": [Circular],
          "withProxy": null,
        },
        "ctx": [Circular],
        "dirs": null,
        "dynamicChildren": null,
        "dynamicProps": null,
        "el": <div
          class="max-w-3xl py-[100px] mx-auto"
        >
          <!--v-if-->
        </div>,
        "key": null,
        "patchFlag": 0,
        "props": {
          "ref": "VTU_COMPONENT",
        },
        "ref": {
          "f": false,
          "i": [Circular],
          "k": undefined,
          "r": "VTU_COMPONENT",
        },
        "scopeId": null,
        "shapeFlag": 36,
        "slotScopeIds": null,
        "ssContent": null,
        "ssFallback": null,
        "staticCount": 0,
        "suspense": null,
        "target": null,
        "targetAnchor": null,
        "transition": null,
        "type": {
          "__file": "C:/Users/metle/Desktop/Blogg/frontend/pages/post/[id].vue",
          "__name": "[id]",
          "components": {
            "PostBookmark": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
              "__name": "PostBookmark",
              "props": {
                "post": {
                  "required": true,
                  "type": [Function],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "SinglePostCommentsList": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
              "__name": "SinglePostCommentsList",
              "props": {
                "comments": {
                  "required": true,
                  "type": [
                    [Function],
                    null,
                  ],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "TagsList": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/TagsList.vue",
              "__name": "TagsList",
              "props": {
                "tags": {
                  "required": true,
                  "type": [Function],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
          },
          "render": [Function],
          "setup": [Function],
        },
      },
      "suspense": null,
      "suspenseId": 0,
      "type": {
        "name": "VTU_ROOT",
        "render": [Function],
        "setup": [Function],
      },
      "u": null,
      "uid": 2,
      "um": null,
      "update": [Function],
      "vnode": {
        "__v_isVNode": true,
        "__v_skip": true,
        "anchor": null,
        "appContext": {
          "app": [Circular],
          "components": {
            "PostBookmark": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/UI/PostBookmark.vue",
              "__name": "PostBookmark",
              "props": {
                "post": {
                  "required": true,
                  "type": [Function],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "SinglePostCommentsList": {
              "__file": "C:/Users/metle/Desktop/Blogg/frontend/components/modules/Blogg/SinglePostCommentsList.vue",
              "__name": "SinglePostCommentsList",
              "props": {
                "comments": {
                  "required": true,
                  "type": [
                    [Function],
                    null,
                  ],
                },
              },
              "render": [Function],
              "setup": [Function],
            },
            "TagsList": {
              "name": "TagsList",
            },
            "transition": {
              "name": "transition",
            },
            "transition-group": {
              "name": "transition-group",
            },
          },
          "config": {
            "compilerOptions": {},
            "errorHandler": undefined,
            "globalProperties": {
              "$pinia": {
                "_a": [Circular],
                "_e": EffectScope {
                  "_active": true,
                  "cleanups": [],
                  "detached": true,
                  "effects": [],
                  "parent": undefined,
                  "scopes": [
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 0,
                      "parent": [Circular],
                    },
                    EffectScope {
                      "_active": true,
                      "cleanups": [],
                      "detached": false,
                      "effects": [],
                      "index": 1,
                      "parent": [Circular],
                    },
                  ],
                },
                "_p": [
                  [Function],
                  [Function],
                  [Function],
                ],
                "_s": Map {
                  "Store for containing posts and related to posts" => {
                    "$dispose": [Function],
                    "$id": "Store for containing posts and related to posts",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "posts",
                        "followingPosts",
                        "allCategories",
                        "allTags",
                        "loggedInUserPosts",
                        "baseFetchURL",
                        "baseLoggedInUserPostsURL",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user" => {
                    "$dispose": [Function],
                    "$id": "Store for storing information about the logged in user",
                    "$onAction": [Function],
                    "$patch": [MockFunction $patch],
                    "$reset": [MockFunction spy],
                    "$subscribe": [Function],
                    "_customProperties": Set {},
                    "_hmrPayload": {
                      "actions": {},
                      "getters": {},
                      "hotState": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": {},
                        "_value": {},
                        "dep": undefined,
                      },
                      "state": [
                        "loggedInUserProfile",
                        "idArrayOfSavedPosts",
                        "idArrayOfLoggedInUserFollowingUsers",
                      ],
                    },
                    "_hotUpdate": [Function],
                    "_p": [Circular],
                    "idArrayOfLoggedInUserFollowingUsers": [],
                    "idArrayOfSavedPosts": [],
                    "loggedInUserProfile": null,
                  },
                },
                "_testing": true,
                "app": [Circular],
                "install": [Function],
                "state": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {
                    "Store for containing posts and related to posts": {
                      "allCategories": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "allTags": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "baseFetchURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/feed/",
                        "_value": "http://localhost:8888/api/feed/",
                        "dep": undefined,
                      },
                      "baseLoggedInUserPostsURL": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": "http://localhost:8888/api/min-side/posts/",
                        "_value": "http://localhost:8888/api/min-side/posts/",
                        "dep": undefined,
                      },
                      "followingPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "loggedInUserPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                      "posts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "idArrayOfSavedPosts": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": [],
                        "_value": [],
                        "dep": undefined,
                      },
                      "loggedInUserProfile": RefImpl {
                        "__v_isRef": true,
                        "__v_isShallow": false,
                        "_rawValue": null,
                        "_value": null,
                        "dep": undefined,
                      },
                    },
                  },
                  "_value": {
                    "Store for containing posts and related to posts": {
                      "allCategories": null,
                      "allTags": null,
                      "baseFetchURL": "http://localhost:8888/api/feed/",
                      "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                      "followingPosts": null,
                      "loggedInUserPosts": null,
                      "posts": null,
                    },
                    "Store for storing information about the logged in user": {
                      "idArrayOfLoggedInUserFollowingUsers": [],
                      "idArrayOfSavedPosts": [],
                      "loggedInUserProfile": null,
                    },
                  },
                  "dep": undefined,
                },
                "use": [Function],
              },
            },
            "isNativeTag": [Function],
            "optionMergeStrategies": {},
            "performance": false,
            "warnHandler": undefined,
          },
          "directives": {},
          "emitsCache": WeakMap {},
          "mixins": [
            {
              "beforeCreate": [Function],
            },
          ],
          "optionsCache": WeakMap {},
          "propsCache": WeakMap {},
          "provides": {
            Symbol(pinia): {
              "_a": [Circular],
              "_e": EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": true,
                "effects": [],
                "parent": undefined,
                "scopes": [
                  EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": false,
                    "effects": [],
                    "index": 0,
                    "parent": [Circular],
                  },
                  EffectScope {
                    "_active": true,
                    "cleanups": [],
                    "detached": false,
                    "effects": [],
                    "index": 1,
                    "parent": [Circular],
                  },
                ],
              },
              "_p": [
                [Function],
                [Function],
                [Function],
              ],
              "_s": Map {
                "Store for containing posts and related to posts" => {
                  "$dispose": [Function],
                  "$id": "Store for containing posts and related to posts",
                  "$onAction": [Function],
                  "$patch": [MockFunction $patch],
                  "$reset": [MockFunction spy],
                  "$subscribe": [Function],
                  "_customProperties": Set {},
                  "_hmrPayload": {
                    "actions": {},
                    "getters": {},
                    "hotState": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": {},
                      "_value": {},
                      "dep": undefined,
                    },
                    "state": [
                      "posts",
                      "followingPosts",
                      "allCategories",
                      "allTags",
                      "loggedInUserPosts",
                      "baseFetchURL",
                      "baseLoggedInUserPostsURL",
                    ],
                  },
                  "_hotUpdate": [Function],
                  "_p": [Circular],
                  "allCategories": null,
                  "allTags": null,
                  "baseFetchURL": "http://localhost:8888/api/feed/",
                  "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                  "followingPosts": null,
                  "loggedInUserPosts": null,
                  "posts": null,
                },
                "Store for storing information about the logged in user" => {
                  "$dispose": [Function],
                  "$id": "Store for storing information about the logged in user",
                  "$onAction": [Function],
                  "$patch": [MockFunction $patch],
                  "$reset": [MockFunction spy],
                  "$subscribe": [Function],
                  "_customProperties": Set {},
                  "_hmrPayload": {
                    "actions": {},
                    "getters": {},
                    "hotState": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": {},
                      "_value": {},
                      "dep": undefined,
                    },
                    "state": [
                      "loggedInUserProfile",
                      "idArrayOfSavedPosts",
                      "idArrayOfLoggedInUserFollowingUsers",
                    ],
                  },
                  "_hotUpdate": [Function],
                  "_p": [Circular],
                  "idArrayOfLoggedInUserFollowingUsers": [],
                  "idArrayOfSavedPosts": [],
                  "loggedInUserProfile": null,
                },
              },
              "_testing": true,
              "app": [Circular],
              "install": [Function],
              "state": RefImpl {
                "__v_isRef": true,
                "__v_isShallow": false,
                "_rawValue": {
                  "Store for containing posts and related to posts": {
                    "allCategories": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "allTags": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "baseFetchURL": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": "http://localhost:8888/api/feed/",
                      "_value": "http://localhost:8888/api/feed/",
                      "dep": undefined,
                    },
                    "baseLoggedInUserPostsURL": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": "http://localhost:8888/api/min-side/posts/",
                      "_value": "http://localhost:8888/api/min-side/posts/",
                      "dep": undefined,
                    },
                    "followingPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "loggedInUserPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                    "posts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                  },
                  "Store for storing information about the logged in user": {
                    "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": [],
                      "_value": [],
                      "dep": undefined,
                    },
                    "idArrayOfSavedPosts": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": [],
                      "_value": [],
                      "dep": undefined,
                    },
                    "loggedInUserProfile": RefImpl {
                      "__v_isRef": true,
                      "__v_isShallow": false,
                      "_rawValue": null,
                      "_value": null,
                      "dep": undefined,
                    },
                  },
                },
                "_value": {
                  "Store for containing posts and related to posts": {
                    "allCategories": null,
                    "allTags": null,
                    "baseFetchURL": "http://localhost:8888/api/feed/",
                    "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                    "followingPosts": null,
                    "loggedInUserPosts": null,
                    "posts": null,
                  },
                  "Store for storing information about the logged in user": {
                    "idArrayOfLoggedInUserFollowingUsers": [],
                    "idArrayOfSavedPosts": [],
                    "loggedInUserProfile": null,
                  },
                },
                "dep": undefined,
              },
              "use": [Function],
            },
          },
          "reload": [Function],
        },
        "children": null,
        "component": [Circular],
        "ctx": null,
        "dirs": null,
        "dynamicChildren": null,
        "dynamicProps": null,
        "el": <div
          class="max-w-3xl py-[100px] mx-auto"
        >
          <!--v-if-->
        </div>,
        "key": null,
        "patchFlag": 0,
        "props": null,
        "ref": null,
        "scopeId": null,
        "shapeFlag": 4,
        "slotScopeIds": null,
        "ssContent": null,
        "ssFallback": null,
        "staticCount": 0,
        "suspense": null,
        "target": null,
        "targetAnchor": null,
        "transition": null,
        "type": {
          "name": "VTU_ROOT",
          "render": [Function],
          "setup": [Function],
        },
      },
      "withProxy": null,
    },
    "_props": null,
    "_uid": 1,
    "component": [Function],
    "config": {
      "compilerOptions": {},
      "errorHandler": undefined,
      "globalProperties": {
        "$pinia": {
          "_a": [Circular],
          "_e": EffectScope {
            "_active": true,
            "cleanups": [],
            "detached": true,
            "effects": [],
            "parent": undefined,
            "scopes": [
              EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": false,
                "effects": [],
                "index": 0,
                "parent": [Circular],
              },
              EffectScope {
                "_active": true,
                "cleanups": [],
                "detached": false,
                "effects": [],
                "index": 1,
                "parent": [Circular],
              },
            ],
          },
          "_p": [
            [Function],
            [Function],
            [Function],
          ],
          "_s": Map {
            "Store for containing posts and related to posts" => {
              "$dispose": [Function],
              "$id": "Store for containing posts and related to posts",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "posts",
                  "followingPosts",
                  "allCategories",
                  "allTags",
                  "loggedInUserPosts",
                  "baseFetchURL",
                  "baseLoggedInUserPostsURL",
                ],
              },
              "_hotUpdate": [Function],
              "_p": [Circular],
              "allCategories": null,
              "allTags": null,
              "baseFetchURL": "http://localhost:8888/api/feed/",
              "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
              "followingPosts": null,
              "loggedInUserPosts": null,
              "posts": null,
            },
            "Store for storing information about the logged in user" => {
              "$dispose": [Function],
              "$id": "Store for storing information about the logged in user",
              "$onAction": [Function],
              "$patch": [MockFunction $patch],
              "$reset": [MockFunction spy],
              "$subscribe": [Function],
              "_customProperties": Set {},
              "_hmrPayload": {
                "actions": {},
                "getters": {},
                "hotState": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": {},
                  "_value": {},
                  "dep": undefined,
                },
                "state": [
                  "loggedInUserProfile",
                  "idArrayOfSavedPosts",
                  "idArrayOfLoggedInUserFollowingUsers",
                ],
              },
              "_hotUpdate": [Function],
              "_p": [Circular],
              "idArrayOfLoggedInUserFollowingUsers": [],
              "idArrayOfSavedPosts": [],
              "loggedInUserProfile": null,
            },
          },
          "_testing": true,
          "app": [Circular],
          "install": [Function],
          "state": RefImpl {
            "__v_isRef": true,
            "__v_isShallow": false,
            "_rawValue": {
              "Store for containing posts and related to posts": {
                "allCategories": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "allTags": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "baseFetchURL": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": "http://localhost:8888/api/feed/",
                  "_value": "http://localhost:8888/api/feed/",
                  "dep": undefined,
                },
                "baseLoggedInUserPostsURL": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": "http://localhost:8888/api/min-side/posts/",
                  "_value": "http://localhost:8888/api/min-side/posts/",
                  "dep": undefined,
                },
                "followingPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "loggedInUserPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
                "posts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
              },
              "Store for storing information about the logged in user": {
                "idArrayOfLoggedInUserFollowingUsers": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": [],
                  "_value": [],
                  "dep": undefined,
                },
                "idArrayOfSavedPosts": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": [],
                  "_value": [],
                  "dep": undefined,
                },
                "loggedInUserProfile": RefImpl {
                  "__v_isRef": true,
                  "__v_isShallow": false,
                  "_rawValue": null,
                  "_value": null,
                  "dep": undefined,
                },
              },
            },
            "_value": {
              "Store for containing posts and related to posts": {
                "allCategories": null,
                "allTags": null,
                "baseFetchURL": "http://localhost:8888/api/feed/",
                "baseLoggedInUserPostsURL": "http://localhost:8888/api/min-side/posts/",
                "followingPosts": null,
                "loggedInUserPosts": null,
                "posts": null,
              },
              "Store for storing information about the logged in user": {
                "idArrayOfLoggedInUserFollowingUsers": [],
                "idArrayOfSavedPosts": [],
                "loggedInUserProfile": null,
              },
            },
            "dep": undefined,
          },
          "use": [Function],
        },
      },
      "isNativeTag": [Function],
      "optionMergeStrategies": {},
      "performance": false,
      "warnHandler": undefined,
    },
    "directive": [Function],
    "mixin": [Function],
    "mount": [Function],
    "provide": [Function],
    "runWithContext": [Function],
    "unmount": [Function],
    "use": [Function],
    "version": "3.3.7",
  },
  "__setProps": [Function],
  "cleanUpCallbacks": [
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
    [Function],
  ],
  "componentVM": {},
  "isDisabled": [Function],
  "rootVM": {
    "VTU_COMPONENT": {},
  },
  "wrapperElement": <div
    class="max-w-3xl py-[100px] mx-auto"
  >
    <!--v-if-->
  </div>,
}
`;
